#include "WebSocketServer.h"

WebSocketServer::WebSocketServer(RaspagerDigiExtension* myExtension) {
	this->mywsdata.fwdpwr = 0.0;
	this->mywsdata.revpwr = 0.0;
	this->mywsdata.swr = 0.0;
	this->mywsdata.voltage = 0.0;
	this->mywsdata.current = 0.0;
	this->mywsdata.fwdpwrmean = 0.0;
	this->mywsdata.revpwrmean = 0.0;
	this->mywsdata.swrmean = 0.0;
	this->myExtension = myExtension;


	// From define
    this->server.config.port = WSServerPort;

    auto& echo_all = this->server.endpoint["^/echo_all/?$"];
    echo_all.on_message=[](shared_ptr<WsServer::Connection> /*connection*/, shared_ptr<WsServer::Message> message) {

	// Vielleicht kann man das auch in eine eigene funktion auslagern? Damit das nicht
	// Alles im Constructor steht?

	auto message_str=message->string();
        
        //echo_all.get_connections() can also be used to solely receive connections on this endpoint
        for(auto a_connection: this->server.get_connections()) {
            auto send_stream=make_shared<WsServer::SendStream>();
            *send_stream << message_str;
            
            //server.send is an asynchronous function
            this->server.send(a_connection, send_stream);
        }
    };
    
    thread server_thread([this->&server](){
        //Start WS-server
        this->server.start();
    });
    
    //Wait for server to start so that the client can connect
    this_thread::sleep_for(chrono::seconds(1));

	
}

WebSocketServer::~WebSocketServer() {
	server_thread.join();
}


bool WebSocketServer::SendData(wsdata wsdataToSsend) {
	this->mywsdata = wsdataToSsend;

	json_spirit::Object addr_obj;

	addr_obj.push_back( json_spirit::Pair( "Voltage", this->mywsdata.voltage ) );
	addr_obj.push_back( json_spirit::Pair( "Current", this->mywsdata.current ) );
	addr_obj.push_back( json_spirit::Pair( "PowerForward", this->mywsdata.fwdpwr ) );
	addr_obj.push_back( json_spirit::Pair( "PowerForwardLastTX", this->mywsdata.fwdpwrmean ) );
	addr_obj.push_back( json_spirit::Pair( "PowerReflect", this->mywsdata.revpwr ) );
	addr_obj.push_back( json_spirit::Pair( "PowerReflectLastTX", this->mywsdata.revpwrmean ) );
	addr_obj.push_back( json_spirit::Pair( "PowerVSWR", this->mywsdata.swr ) );
	addr_obj.push_back( json_spirit::Pair( "PowerVSWRLastTX", this->mywsdata.swrmean ) );
	addr_obj.push_back( json_spirit::Pair( "Slots", "1283ABC" ) );

	
	std::string testinfo = json_spirit::write_formatted(addr_obj);
	
//	auto testinfo = "Das ist ja toll";
	//echo_all.get_connections() can also be used to solely receive connections on this endpoint
    for(auto a_connection: this->server.get_connections()) {
        auto send_stream=make_shared<WsServer::SendStream>();
        *send_stream << testinfo;
            
        //server.send is an asynchronous function
        this->server.send(a_connection, send_stream);
	}
	return true;
}